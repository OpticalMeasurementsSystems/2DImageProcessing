/*
 * Dragster line scanners readout test
 */

#include <stdio.h>
#include "imageCaptureManager.h"
#include "globalDefs.h"

extern PixelFrequencies linescanner0PixelFrequencies;
extern PixelFrequencies linescanner1PixelFrequencies;

#define SYNCH_FREQUENCY 2000 // Hz (period of mechanical part of system)
#define TESTING_TIME 1       // seconds
#define CYCLES_NUMBER SYNCH_FREQUENCY * TESTING_TIME
#define TICKS_TO_TIME_COEFF 100000

//#define SPI_TESTING

static void clearFrequencies();
static void displayFrequencies();

int main()
{
    printf("Application started \r\n");

    ImageCaptureManager systemManager;
    systemManager.initialize();

#ifdef SPI_TESTING
    while(1)
    {
    	systemManager.sendTestSpiSequence();
    	for(int i=0; i< 1000000; i++);  //pause
    }
    // stop ...
    systemManager.stopImageCapture();
    printf("Application stopped \r\n");
#else
    systemManager.resetImageCapture();
    clearFrequencies();
    systemManager.startImageCapture();

    while(linescanner0PixelFrequencies._counter != CYCLES_NUMBER);
#ifdef USE_AXI_QUAD_SPI
    DragsterConfig linescanner0Config = systemManager.getDragsterConfig(LINESCANNER0);
    DragsterConfig linescanner1Config = systemManager.getDragsterConfig(LINESCANNER1);
    systemManager.updateDragsters();

    xil_printf("Linescanner 0, Register1: 0x%02X \r\n", linescanner0Config.getControlRegister1()._mapImpl._registerValue);
    xil_printf("Linescanner 0, Register2: 0x%02X \r\n", linescanner0Config.getControlRegister2()._mapImpl._registerValue);
    xil_printf("Linescanner 0, Register3: 0x%02X \r\n", linescanner0Config.getControlRegister3()._mapImpl._registerValue);

    xil_printf("Linescanner 1, Register1: 0x%02X \r\n", linescanner1Config.getControlRegister1()._mapImpl._registerValue);
    xil_printf("Linescanner 1, Register2: 0x%02X \r\n", linescanner1Config.getControlRegister2()._mapImpl._registerValue);
    xil_printf("Linescanner 1, Register3: 0x%02X \r\n\r\n", linescanner1Config.getControlRegister3()._mapImpl._registerValue);
#endif

    displayFrequencies();
    // stop ...
    systemManager.stopImageCapture();
    printf("Application stopped \r\n");
#endif
    return 0;
}

void clearFrequencies()
{
	linescanner0PixelFrequencies._counter = 0;
    linescanner0PixelFrequencies._pixel0Frequency0 = 0;
    linescanner0PixelFrequencies._pixel0Frequency1 = 0;
    linescanner0PixelFrequencies._pixel1Frequency0 = 0;
    linescanner0PixelFrequencies._pixel1Frequency1 = 0;
    linescanner0PixelFrequencies._pixel2Frequency0 = 0;
    linescanner0PixelFrequencies._pixel2Frequency1 = 0;
    linescanner0PixelFrequencies._pixel0UnassignedFrequency = 0;

    linescanner1PixelFrequencies._counter = 0;
    linescanner1PixelFrequencies._pixel0Frequency0 = 0;
    linescanner1PixelFrequencies._pixel0Frequency1 = 0;
    linescanner1PixelFrequencies._pixel1Frequency0 = 0;
    linescanner1PixelFrequencies._pixel1Frequency1 = 0;
    linescanner1PixelFrequencies._pixel2Frequency0 = 0;
    linescanner1PixelFrequencies._pixel2Frequency1 = 0;
    linescanner1PixelFrequencies._pixel0UnassignedFrequency = 0;
}

void displayFrequencies()
{
    xil_printf("Frequency analyzer 0 rised %d times \r\n", linescanner0PixelFrequencies._counter);
    xil_printf("Frequency analyzer 1 rised %d times \r\n", linescanner1PixelFrequencies._counter);

    xil_printf("Total analyzer time: %d seconds \r\n", TESTING_TIME);

    xil_printf("\nFrequency analyzer 0 pixel0 frequency 0 %d ticks or, %x milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel0Frequency0, linescanner0PixelFrequencies._pixel0Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel0 frequency 1 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel0Frequency1, linescanner0PixelFrequencies._pixel0Frequency1 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel0 unassigned frequency %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel0UnassignedFrequency, linescanner0PixelFrequencies._pixel0UnassignedFrequency / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel1 frequency 0 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel1Frequency0, linescanner0PixelFrequencies._pixel1Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel1 frequency 1 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel1Frequency1, linescanner0PixelFrequencies._pixel1Frequency1 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel2 frequency 0 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel2Frequency0, linescanner0PixelFrequencies._pixel2Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel2 frequency 1 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner0PixelFrequencies._pixel2Frequency1, linescanner0PixelFrequencies._pixel2Frequency1 / TICKS_TO_TIME_COEFF);

    xil_printf("\nFrequency analyzer 1 pixel0 frequency 0 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel0Frequency0, linescanner1PixelFrequencies._pixel0Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 1 pixel0 frequency 1 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel0Frequency1, linescanner1PixelFrequencies._pixel0Frequency1 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 0 pixel0 unassigned frequency %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel0UnassignedFrequency, linescanner1PixelFrequencies._pixel0UnassignedFrequency / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 1 pixel1 frequency 0 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel1Frequency0, linescanner1PixelFrequencies._pixel1Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 1 pixel1 frequency 1 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel1Frequency1, linescanner1PixelFrequencies._pixel1Frequency1 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 1 pixel2 frequency 0 %d ticks or, %.f2 milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel2Frequency0, linescanner1PixelFrequencies._pixel2Frequency0 / TICKS_TO_TIME_COEFF);
    xil_printf("Frequency analyzer 1 pixel2 frequency 1 %d ticks or, % milliseconds\r\n",
    		   linescanner1PixelFrequencies._pixel2Frequency1, linescanner1PixelFrequencies._pixel2Frequency1 / TICKS_TO_TIME_COEFF);
}
